#! /usr/bin/env python

import rospy
import numpy as np
from std_msgs.msg import Float32

class Donatello:
    def __init__(self):
        # Creates a node called 'my_example_node' and registers it to the ROS master
        rospy.init_node('Donatello')

        # Publisher to the topic '/output'.
        self.publisher = rospy.Publisher('/output', Float32, queue_size=10)

        # Subscriber to the topic '/input'. self.callback is called when a message is received
        self.subscriber = rospy.Subscriber('/input', Float32, self.callback)

    # Callback function called when a new message is received, msg is the message itself
    def callback(self, msg):
        msgout = Float32()
        msgout.data = msg.data*msg.data

        # Publish the output
        self.publisher.publish(msgout)

# This section is only executed when the file itself is run
if __name__ == '__main__':
    try:
        # Create the node and its publishers/subscribers
        node = Donatello()
        
        rate = rospy.Rate(100)
        x = np.arange(0, 10, 0.01)
        y = np.sin(x)
        
        while 1:
        	for i in y:
        		node.publisher.publish(i)
        		rate.sleep()
        		
        		

        # Make the node wait until it receives a message or stopped by Ctrl+C
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
